using System;
using System.IO;
using Terraria;
using Terraria.ModLoader;

namespace ChemistryClass.ModUtils {
    public class ModProjectilePlus : ModProjectile {

        public override string Texture => "Terraria/Item_0";

        public int critChance = 0;
        public int frameCounter = 0;

        public bool chemistryOnly = false;
        public bool inheritRecentmostStats = false;

        public Player OwningPlayer => Main.player[projectile.owner];

        public virtual bool SafePreAI() => true;
        public override bool PreAI() {

            if (frameCounter == 0) {

                critChance = OwningPlayer.HeldItem.crit;

            }

            frameCounter++;

            return SafePreAI();

        }

        public virtual void SafeSendExtraAI(BinaryWriter writer) { }
        public sealed override void SendExtraAI(BinaryWriter writer) {

            writer.Write(critChance);
            writer.Write(frameCounter);
            writer.Write(chemistryOnly);
            writer.Write(inheritRecentmostStats);

            SafeSendExtraAI(writer);

        }

        public virtual void SafeReceiveExtraAI(BinaryReader reader) { }
        public sealed override void ReceiveExtraAI(BinaryReader reader) {

            inheritRecentmostStats = reader.ReadBoolean();
            chemistryOnly = reader.ReadBoolean();
            frameCounter = reader.Read();
            critChance = reader.Read();

            SafeReceiveExtraAI(reader);

        }

        public virtual void SafeModifyHitNPC(NPC target, ref int damage, ref float knockback, ref bool crit, ref int hitDirection) { }
        public sealed override void ModifyHitNPC(NPC target, ref int damage, ref float knockback, ref bool crit, ref int hitDirection) {

            Item heldItem = OwningPlayer.HeldItem;

            if ( inheritRecentmostStats && heldItem.shoot == projectile.type ) {

                if (chemistryOnly)
                    heldItem.chemistry().RefreshStats();

                damage = heldItem.damage;
                knockback = heldItem.knockBack;
                critChance = heldItem.crit;

            }

            crit = critChance > Main.rand.Next(101);

            SafeModifyHitNPC(target, ref damage, ref knockback, ref crit, ref hitDirection);

        }

    }
}
