using System;
using System.IO;
using ChemistryClass.ModUtils;
using Terraria.ModLoader;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Terraria;
using Steamworks;
using Terraria.ID;
using log4net.Util;

namespace ChemistryClass.Projectiles {
    public class LightningBase : ModProjectilePlus {

        public override string Texture => "Terraria/Item_0";

        public ProceduralLineSequence sequence = new ProceduralLineSequence();
        public Vector2 currentTVec = Vector2.Zero;

        public float Movement => projectile.velocity.Length() * 3f;
        public Color ElecColor { get; } = new Color(0, 255, 255, 150);
        public Color HighColor { get; } = new Color(255, 255, 255, 100);

        public float LastTurn {
            get => projectile.ai[0];
            set => projectile.ai[0] = value;
        }

        public float Collisions {
            get => projectile.ai[1];
            set => projectile.ai[1] = value;
        }

        public override void SafeSetDefaults() {

            projectile.width = 6;
            projectile.height = 6;

            projectile.tileCollide = false;
            projectile.damage = 10;
            projectile.knockBack = 0;

            projectile.friendly = true;

            projectile.penetrate = -1;
            projectile.maxPenetrate = -1;

            projectile.timeLeft = 500;

        }

        public override bool ShouldUpdatePosition() => false;

        public override bool? Colliding(Rectangle projHitbox, Rectangle targetHitbox)
            => sequence.IsValid ? LineSequenceCollision.CheckAAABCollision(targetHitbox, sequence) : false;

        public override void FirstFrame() {

            sequence = new ProceduralLineSequence(projectile.Center);
            currentTVec = projectile.velocity;
            Collisions = 0;

            projectile.netUpdate = true;

            CritChance = 0;

            Main.PlaySound(SoundID.Item12.WithVolume(0.5f));

        }

        public bool TryDust(int x, int y) {
            if(Main.rand.NextFloat() < 0.03f) {
                Dust.NewDust(new Vector2(x, y), 0, 0, DustID.Electric, Main.rand.NextFloat(-0.5f, 0.5f), Main.rand.NextFloat(-0.5f, 0.5f), Scale: 0.5f);
            }
            return true;
        }

        public override void AI() {

            NPC targ = CCUtils.Min(Main.npc, npc => npc.Distance(sequence.Endpoint));
            if (targ.Distance(sequence.Endpoint) > 400f) targ = null;

            Vector2 targetVec =
                targ == null || !targ.CanBeChasedBy() || targ.friendly || targ.immortal ?
                currentTVec : targ.Center - sequence.Endpoint;

            float lastTurn = LastTurn;

            bool shouldExpand = Collisions <= 0 && ActiveCounter <= 300;

            if (LineSequenceCollision.CheckTileCollision(sequence, 8)) Collisions++;

            sequence.AdvanceSequence(
                Movement,
                Movement * 5f,
                () => LineGeneration.Lightning(
                        sequence,
                        Movement * Main.rand.NextFloat(1.1f, 1.5f),
                        targetVec,
                        ref currentTVec,
                        ref lastTurn
                        ),
                shouldExpand
                );


            LastTurn = lastTurn;

            //DUST UWU
            sequence.Plot(8, TryDust);
            if(!shouldExpand) {
                for(int i = 0; i < 3; i++) Dust.NewDust(sequence.VisualEndpoint, 0, 0, DustID.Electric);
            }

            //Main.NewText(sequence.SegmentCount);

            if (!sequence.IsValid) projectile.Kill();

        }

        public override void SafeSendExtraAI(BinaryWriter writer) {
            if (sequence.IsValid) {
                sequence.Send(writer);
            }
            writer.WriteVector2(currentTVec);
        }

        public override void SafeReceiveExtraAI(BinaryReader reader) {
            currentTVec = reader.ReadVector2();
            ProceduralLineSequence seq = ProceduralLineSequence.ReadSeq(reader);
            if (seq.IsValid) {
                sequence = seq;
            }
        }

        public override bool PreDraw(SpriteBatch spriteBatch, Color lightColor) {

            if (!sequence.IsValid) return false;

            spriteBatch.DrawLineSequence(sequence, 8, -Main.screenPosition, color: ElecColor);
            spriteBatch.DrawLineSequence(sequence, 4, -Main.screenPosition, color: HighColor);

            //DEBUGGING
            //Main.NewText("SAUDHUISDHIU");
            //spriteBatch.DrawLineSequence(new ProceduralLineSequence(new Vector2(200), new Vector2(500)) { EndLength = 300f }, 16, Vector2.Zero, color: Color.White);
            //spriteBatch.DrawLine(new LineSegment(new Vector2(200, 300), new Vector2(500, 600)), 16, color: Color.White);

            return false;

        }

        public override void OnHitNPC(NPC target, int damage, float knockback, bool crit) {
            Collisions++;
        }

    }
}
